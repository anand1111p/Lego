package ShapesSolution.Shapes;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Dimension;

public class LegoMove extends JFrame {
  /*package*/ int xRobotCurrentPosition;
  /*package*/ int yRobotCurrentPosition;
  /*package*/ int xRobotOldPosition;
  /*package*/ int yRobotOldPosition;
  /*package*/ int xCordMin;
  /*package*/ int xCordMax;
  /*package*/ int yCordMin;
  /*package*/ int yCordMax;
  /*package*/ LegoMove.Direction dir;

  public enum Direction {
    NORTH(),
    SOUTH(),
    EAST(),
    WEST()
  }

  private JPanel panel = new JPanel() {
    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);



      graphics.drawRect(100, 100, 800, 800);

      setStartingPoint(110, 110);
      setRobotBounds(100, 100, 800, 800);

      moveForward(500);
      graphics.drawLine(xRobotOldPosition, yRobotOldPosition, xRobotCurrentPosition, yRobotCurrentPosition);

      changeDirection("right");

      moveForward(100);
      graphics.drawLine(xRobotOldPosition, yRobotOldPosition, xRobotCurrentPosition, yRobotCurrentPosition);

      changeDirection("right");

      moveForward(400);
      graphics.drawLine(xRobotOldPosition, yRobotOldPosition, xRobotCurrentPosition, yRobotCurrentPosition);

      changeDirection("right");

      moveForward(1000);
      graphics.drawLine(xRobotOldPosition, yRobotOldPosition, xRobotCurrentPosition, yRobotCurrentPosition);
    }
  };

  public void moveForward(int distance) {
    xRobotOldPosition = xRobotCurrentPosition;
    yRobotOldPosition = yRobotCurrentPosition;
    switch (dir) {
      case EAST:
        if (xRobotCurrentPosition + distance > xCordMax) {
          xRobotCurrentPosition = xCordMax;
        }
        if (xRobotCurrentPosition + distance <= xCordMax) {
          xRobotCurrentPosition = xRobotCurrentPosition + distance;
        }
        break;
      case SOUTH:
        if (yRobotCurrentPosition + distance > yCordMax) {
          yRobotCurrentPosition = yCordMax;
        }
        if (yRobotCurrentPosition + distance <= yCordMax) {
          yRobotCurrentPosition = yRobotCurrentPosition + distance;
        }
        break;
      case WEST:
        if (xRobotCurrentPosition - distance < xCordMin) {
          xRobotCurrentPosition = xCordMin;
        }
        if (xRobotCurrentPosition - distance >= xCordMin) {
          xRobotCurrentPosition = xRobotCurrentPosition - distance;
        }
        break;
      case NORTH:
        if (yRobotCurrentPosition - distance < yCordMin) {
          yRobotCurrentPosition = yCordMin;
        }
        if (yRobotCurrentPosition - distance >= yCordMin) {
          yRobotCurrentPosition = yRobotCurrentPosition - distance;
        }
        break;
      default:
        //  do nithing 
    }



  }

  /*package*/ LegoMove.Direction turnLeft() {
    switch (dir) {
      case NORTH:
        return LegoMove.Direction.WEST;
      case WEST:
        return LegoMove.Direction.SOUTH;
      case SOUTH:
        return LegoMove.Direction.EAST;
      case EAST:
        return LegoMove.Direction.NORTH;
      default:
        return LegoMove.Direction.EAST;
    }


  }
  /*package*/ LegoMove.Direction turnRight() {
    switch (dir) {
      case NORTH:
        return LegoMove.Direction.EAST;
      case WEST:
        return LegoMove.Direction.NORTH;
      case SOUTH:
        return LegoMove.Direction.WEST;
      case EAST:
        return LegoMove.Direction.SOUTH;
      default:
        return LegoMove.Direction.EAST;
    }
  }


  public void changeDirection(String turnDirection) {
    if (turnDirection.equals("left")) {
      dir = turnLeft();
    }
    if (turnDirection.equals("right")) {
      dir = turnRight();
    }
  }

  public void setStartingPoint(int x, int y) {
    xRobotCurrentPosition = x;
    yRobotCurrentPosition = y;
  }

  public void setRobotBounds(int x, int y, int length, int width) {
    xCordMin = x;
    yCordMin = y;
    xCordMax = x + length;
    yCordMax = y + width;
  }

  private void initialize() {
    this.setTitle("LegoMove");
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    this.add(panel);
    panel.setPreferredSize(new Dimension(1000, 1000));
    this.pack();
    this.setVisible(true);
    dir = LegoMove.Direction.EAST;
  }

  public static void main(String[] args) {
    LegoMove canvas = new LegoMove();
    canvas.initialize();
  }

}
